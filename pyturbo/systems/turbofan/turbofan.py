# Copyright (C) 2022-2024, twiinIT
# SPDX-License-Identifier: BSD-3-Clause

from pathlib import Path

from cosapp.systems import System

import pyturbo.systems.turbine.data as trb_data
from pyturbo.systems.fan_module import FanModule
from pyturbo.systems.gas_generator import GasGenerator
from pyturbo.systems.generic import GenericSystemView
from pyturbo.systems.inlet import Inlet
from pyturbo.systems.nacelle import Nacelle
from pyturbo.systems.nozzle import Nozzle
from pyturbo.systems.structures import Channel
from pyturbo.systems.turbine import Turbine
from pyturbo.systems.turbofan import TurbofanAero, TurbofanGeom, TurbofanWeight
from pyturbo.utils import load_from_json


class Turbofan(System):
    """Turbofan assembly system.

    Sub-systems
    -----------
    inlet: Inlet
        inlet before the fan
    fan_module: FanModule
        fan module made of fan, booster, ogv, ic and shaft
    core: GasGenerator
        core is made of HPC, combustor and HPT
    tcf: Channel
        turbine center frame
    turbine: Turbine
        low pressure turbine
    trf: Channel
        turbine rear frame
    primary_nozzle: Nozzle
        nozzle in the primary flow
    secondary_nozzle: Nozzle
        nozzle in the secondary flow
    nacelle: Nacelle
        nacelle

    geom: TurbofanGeom
        sub systems key points generated from the engine envelop
    view: TurbofanView
        compute visualisation

    aero: TurbofanAero
        turbofan aero performances computed from components
    weight: TurbofanWeight
        weight evaluation from geometry

    Inputs
    ------
    fl_in: FluidPort
        inlet flow
    pamb[Pa]: float
        ambiant static pressure
    fan_diameter[m]: float
        diameter of the fan
    fuel_W[kg/s]: float
        fuel mass flow

    Outputs
    -------
    pamb[Pa]: float
        ambiant pressure
    weight[kg]: float
        engine weight (without nacelle)
    thrust[N]: float
        total thrust generated by engine and nacelle
    bpr[-]: float
        by pass ratio = secondary flow / primary flow
    opr[-]: float
        overall pressure ration
    sfc[-]: float
        specific fuel consumption
    N1[rpm]: float
        Low pressure spool speed rotation
    N2[rpm]: float
        High pressure spool speed rotation
    pr_split[-]: float
        pressure split between fan module and core
    pr_nozzle[-] : float
        total pressure ratio between secondary nozzle and primary nozzle

    """

    def setup(self, init_file: Path = None):
        # geom
        self.add_child(
            TurbofanGeom("geom"),
            pulling=[
                "fan_diameter",
                "frd_mount",
                "aft_mount",
            ],
        )

        # component
        self.add_child(Inlet("inlet"), pulling=["fl_in", "pamb"])
        self.add_child(
            FanModule("fan_module"),
            pulling={"bpr": "bpr", "N": "N1", "fan_diameter": "fan_diameter"},
        )
        self.add_child(Channel("fan_duct"))
        self.add_child(GasGenerator("core"), pulling={"fuel_W": "fuel_W", "N": "N2"})
        self.add_child(Channel("tcf"))
        self.add_child(Turbine("turbine"))
        self.add_child(Channel("trf"))
        self.add_child(Nozzle("primary_nozzle"), pulling=["pamb"])
        self.add_child(Nozzle("secondary_nozzle"), pulling=["pamb"])
        self.add_child(Nacelle("nacelle"))

        children_view_name = [
            "nacelle",
            "inlet",
            "fan_module",
            "fan_duct",
            "core",
            "tcf",
            "turbine",
            "primary_nozzle",
            "secondary_nozzle",
        ]
        self.add_child(
            GenericSystemView("view", children_name=children_view_name), pulling=["occ_view"]
        )

        # physics
        self.add_child(
            TurbofanAero("aero"),
            pulling=["fuel_W", "opr", "thrust", "pr_split", "sfc", "pr_nozzle"],
        )
        self.add_child(TurbofanWeight("self_weight"), pulling=["fan_diameter", "weight"])

        # shaft connectors
        self.connect(self.turbine.sh_out, self.fan_module.sh_in)

        # fluid connectors
        self.connect(self.inlet.fl_out, self.fan_module.fl_in)
        self.connect(self.fan_module.fl_bypass, self.fan_duct.fl_in)
        self.connect(self.fan_duct.fl_out, self.secondary_nozzle.fl_in)

        self.connect(self.fan_module.fl_core, self.core.fl_in)
        self.connect(self.core.fl_out, self.tcf.fl_in)
        self.connect(self.tcf.fl_out, self.turbine.fl_in)
        self.connect(self.turbine.fl_out, self.trf.fl_in)
        self.connect(self.trf.fl_out, self.primary_nozzle.fl_in)

        # geometry connectors
        self.connect(
            self.geom,
            self.fan_module,
            {"fan_module_length": "length"},
        )
        self.connect(self.geom.inlet_kp, self.inlet.kp)
        self.connect(self.geom.core_kp, self.core.kp)
        self.connect(self.geom.tcf_kp, self.tcf.kp)
        self.connect(self.geom.turbine_kp, self.turbine.kp)
        self.connect(self.geom.trf_kp, self.trf.kp)
        self.connect(self.geom.primary_nozzle_kp, self.primary_nozzle.kp)
        self.connect(self.geom.secondary_nozzle_kp, self.secondary_nozzle.kp)
        self.connect(self.geom.fan_duct_kp, self.fan_duct.kp)
        self.connect(self.geom.nacelle_kp, self.nacelle.kp)

        # aerodynamic performance connectors
        self.connect(self.inlet.outwards, self.aero.inwards, {"drag": "inlet_drag"})
        self.connect(self.fan_module.outwards, self.aero.inwards, ["fan_pr", "booster_pr"])
        self.connect(self.core.outwards, self.aero.inwards, {"pr": "core_opr"})
        self.connect(
            self.primary_nozzle.outwards, self.aero.inwards, {"thrust": "primary_nozzle_thrust"}
        )
        self.connect(
            self.secondary_nozzle.outwards, self.aero.inwards, {"thrust": "secondary_nozzle_thrust"}
        )
        self.connect(self.fan_duct.fl_out, self.aero.fl_secondary_nozzle)
        self.connect(self.trf.fl_out, self.aero.fl_primary_nozzle)

        # weight connectors
        self.connect(self.geom, self.self_weight, {"engine_length": "length"})

        # view connectors
        for name in children_view_name:
            self.connect(self[name], self.view, {"occ_view": f"{name}_view"})

        # solver
        self.add_unknown("fl_in.W")

        # design method
        design = self.add_design_method("scaling")
        design.add_unknown("fan_diameter")

        # inlet
        design.add_target("inlet.aero.mach")

        # fan
        design.add_unknown("fan_module.fan.aero.xnd", max_rel_step=0.5)
        design.add_unknown("fan_module.fan.aero.phiP", lower_bound=0.1, upper_bound=1.5)

        design.add_target("fan_module.fan.aero.pcnr")
        design.add_target("fan_module.fan.aero.utip")
        design.add_target("bpr")

        # booster
        design.add_unknown("fan_module.geom.booster_radius_ratio")
        design.add_unknown(
            "fan_module.booster.geom.blade_hub_to_tip_ratio", lower_bound=1e-5, upper_bound=1.0
        )
        design.add_unknown("fan_module.booster.aero.phiP")
        design.add_unknown("fan_module.booster.aero.xnd", max_rel_step=0.5)

        design.add_target("fan_module.booster.aero.phi")
        design.add_target("fan_module.booster.aero.psi")
        design.add_target("fan_module.booster.aero.spec_flow")
        design.add_target("fan_module.booster.aero.pcnr")

        # lpt
        design.add_unknown("geom.turbine_radius_ratio")
        design.add_unknown("turbine.geom.blade_height_ratio", lower_bound=0.0, upper_bound=1.0)
        design.add_unknown("turbine.aero.Ncdes")

        design.add_target("turbine.aero.psi")
        design.add_target("turbine.aero.Ncqdes")

        # hpc
        design.add_unknown("geom.core_inlet_radius_ratio", max_rel_step=0.8)
        design.add_unknown("core.compressor.aero.xnd", max_rel_step=0.5)
        design.add_unknown("core.compressor.aero.phiP")

        design.add_target("core.compressor.aero.pcnr")
        design.add_target("core.compressor.aero.phi")
        design.add_target("core.compressor.aero.utip")
        design.add_target("core.compressor.aero.pr")

        # combustor
        design.add_target("core.combustor.aero.Tcomb")

        # hpt
        design.add_unknown("geom.core_exit_radius_ratio", max_rel_step=0.8)
        design.add_unknown("core.turbine.geom.blade_height_ratio", lower_bound=0.0, upper_bound=1.0)
        design.add_unknown("core.turbine.aero.Ncdes")

        design.add_target("core.turbine.aero.psi")
        design.add_target("core.turbine.aero.Ncqdes")

        # nozzle
        design.add_unknown("geom.pri_nozzle_area_ratio", lower_bound=0.05)
        design.add_unknown("geom.sec_nozzle_area_ratio", upper_bound=1.0)

        design.add_target("pr_nozzle")

        # init
        load_from_json(self.turbine, Path(trb_data.__file__).parent / "lpt.json")

        if init_file:
            load_from_json(self, init_file)
