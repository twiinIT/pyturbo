# Copyright (C) 2022-2024, twiinIT
# SPDX-License-Identifier: BSD-3-Clause

from cosapp.systems import System

from pyturbo.ports import FluidPort


class TurbofanAero(System):
    """Turbofan model aero performances computation.

    Inputs
    ------
    primary_nozzle_thrust[N]: float, default=0.0
        total thrust generated by primary nozzle
    secondary_nozzle_thrust[N]: float, default=0.0
        total thrust generated by secondary nozzle
    inlet_drag[N]: float, default=0.0
        inlet total drag

    fuel_W[kg/s]: float, default=1.0
        fuel mass flow
    core_opr[-]: float, default=1.0
        high-pressure core overall pressure ratio
    fan_pr[-]: float, default=1.0
        fan pressure ratio
    booster_pr[-]: float, default=1.0
        booster pressure ratio

    Outputs
    -------
    thrust[N]: float, default=1.0
        engine thrust
    sfc[kg/(daN*h)]: float, default=1.0
        specific consumption
    opr[-]: float, default=1.0
        overall pressure ratio
    pr_split[-]: float, default=1.0
        pressure ratio split hp compressor over booster
    pr_nozzle[-] : float
        total pressure ratio between secondary nozzle and primary nozzle
    """

    def setup(self):
        # inputs
        self.add_input(FluidPort, "fl_primary_nozzle")
        self.add_input(FluidPort, "fl_secondary_nozzle")

        # inwards
        self.add_inward(
            "primary_nozzle_thrust", 0.0, unit="N", desc="total thrust generated by primary nozzle"
        )
        self.add_inward(
            "secondary_nozzle_thrust",
            0.0,
            unit="N",
            desc="total thrust generated by secondary nozzle",
        )
        self.add_inward("inlet_drag", 0.0, unit="N", desc="inlet total drag")

        self.add_inward("fuel_W", 1.0, unit="kg/s", desc="fuel mass flow")
        self.add_inward("core_opr", 1.0, unit="", desc="high-pressure core overall pressure ratio")
        self.add_inward("fan_pr", 1.0, unit="", desc="fan pressure ratio")
        self.add_inward("booster_pr", 1.0, unit="", desc="booster pressure ratio")

        # outwards
        self.add_outward("thrust", 1.0, unit="N", desc="engine thrust")
        self.add_outward("sfc", 1.0, unit="kg / (daN * h)", desc="specific consumption")
        self.add_outward("opr", 1.0, unit="", desc="overall pressure ratio")
        self.add_outward(
            "pr_split", 1.0, unit="", desc="pressure ratio split between hp compressor and booster"
        )
        self.add_outward(
            "pr_nozzle",
            1.0,
            unit="",
            desc="total pressure ratio between seconday nozzle and primary nozzle",
        )

    def compute(self):
        self.thrust = self.primary_nozzle_thrust + self.secondary_nozzle_thrust - self.inlet_drag
        self.sfc = self.fuel_W * 3600 / (self.thrust / 10)
        self.opr = self.core_opr * self.booster_pr
        self.pr_split = self.core_opr / self.booster_pr
        self.pr_nozzle = self.fl_secondary_nozzle.Pt / self.fl_primary_nozzle.Pt
